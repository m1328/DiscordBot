trigger:
  branches:
    include:
      - main

parameters:
- name: buildImage
  displayName: 'Build Docker image?'
  type: boolean
  default: true
  
- name: helmOperation
  displayName: 'Helm Operation'
  type: string
  default: 'reinstall'
  values:
    - install
    - uninstall
    - reinstall

variables:
  - group: moviebot-credentials
  - name: dockerImage
    value: m1328/discord-movie-bot:latest

stages:
- stage: Test
  displayName: 'Run tests'
  jobs:
    - job: PyTest
      displayName: 'Install deps, run pytest and black'
      pool:
        name: 'discord-bot'
      variables:
        - group: moviebot-credentials
      steps:
        - powershell: |
            Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process -Force
          displayName: 'Temporarily allow PowerShell scripts'

        - checkout: self

        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.12'

        - powershell: |
            python -m venv venv
            .\venv\Scripts\Activate.ps1
            python -m pip install --upgrade pip
            pip install -r src/requirements.txt
          displayName: 'Install dependencies'

        - powershell: |
            Set-Content .env "TMDB_API_KEY=$env:TMDB_API_KEY"
            Add-Content .env "DISCORD_TOKEN=$env:DISCORD_TOKEN"
            Add-Content .env "COHERE_API_KEY=$env:COHERE_API_KEY"
          displayName: 'Create .env file from Azure secrets'

        - powershell: |
            .\venv\Scripts\python.exe -m pytest tests --junitxml=results.xml
          displayName: 'Run pytest on all tests'
        
        - task: PublishTestResults@2
          displayName: 'Publish test results'
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: 'results.xml'
            failTaskOnFailedTests: true

        - powershell: |
            .\venv\Scripts\python.exe -m black --check src tests
          displayName: 'Run black style check'

- stage: Docker
  displayName: 'Build and push Docker image'
  condition: and(succeeded(), eq('${{ parameters.buildImage }}', true))
  jobs:
    - job: DockerBuild
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - task: Docker@2
          inputs:
            command: 'buildAndPush'
            containerRegistry: 'DockerHubConnection'
            repository: 'm1328/discord-bot'
            Dockerfile: 'Dockerfile'
            tags: |
              latest

- stage: Deploy
  displayName: 'Deploy the application'
  condition: and(succeeded(), eq('${{ parameters.helmOperation }}', 'install'))
  jobs:
    - job: SimulatedDeploy
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - script: |
            echo "Simulating deploy operation: install"
            echo "Operation: ${{ parameters.helmOperation }}"
          displayName: 'Simulate Install'
